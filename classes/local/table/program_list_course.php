<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Serves an encrypted/unencrypted string as a file for download.
 *
 * @package    quizaccess_sebprogram
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace quizaccess_sebprogram\local\table;

use quizaccess_sebprogram\helper;
use quizaccess_sebprogram\program;
use quizaccess_sebprogram\program_controller_course;

defined('MOODLE_INTERNAL') || die();

require_once($CFG->libdir.'/tablelib.php');

/**
 * Templates table.
 *
 * @copyright  2020 Catalyst IT
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class program_list_course extends \flexible_table {

    /**
     * @var int Autogenerated id.
     */
    private static $autoid = 0;

    /**
     * Constructor
     *
     * @param string|null $id to be used by the table, autogenerated if null.
     */
    public function __construct($id = null) {
        global $PAGE;

        $id = (is_null($id) ? self::$autoid++ : $id);
        parent::__construct('quizaccess_sebprogram' . $id);

        $this->define_baseurl($PAGE->url);
        $this->set_attribute('class', 'generaltable admintable');

        // Column definition.
        $this->define_columns([
            'title',
            'executable',
            'originalname',
            'dependency',
            'numberofuses',
            'actions',
        ]);

        $this->define_headers([
            get_string('title', 'quizaccess_sebprogram'),
            get_string('executable', 'quizaccess_sebprogram'),
            get_string('originalname', 'quizaccess_sebprogram'),
            get_string('dependency', 'quizaccess_sebprogram'),
            get_string('numberofuses', 'quizaccess_sebprogram'),
            get_string('actions'),
        ]);

        $this->setup();
    }

    /**
     * Display name column.
     *
     * @param \quizaccess_sebprogram\program $data Template for this row.
     * @return string
     */
    protected function col_title(program $data) : string {
        return $data->get('title');
    }

    /**
     * Display executable column.
     *
     * @param \quizaccess_sebprogram\template $data Template for this row.
     * @return string
     */
    protected function col_executable(program $data) : string {
        return $data->get('executable');
    }

    /**
     * Display originalname column.
     *
     * @param \quizaccess_sebprogram\template $data Template for this row.
     * @return string
     */
    protected function col_originalname(program $data): string {
        return $data->get('originalname');
    }

    protected function col_dependency(program $data) : string {

        $results = program::get_records_generic_dependency($data->get('id'));

        $html = '';
        foreach ($results as $result) {
            $html .= '<div><strong>'. $result->title .'</strong></div>';
        }
        return $html;
    }

    protected function col_numberofuses(program $data) : string {
        global $DB;
        $count = $DB->count_records("quiz_seb_program_quiz", ['idprogram' => $data->get("id")]);
        if ($count == 0) {
            return $data->get("numberofuses");
        } else {
            return $count;
        }
    }

    /**
     * Display actions column.
     *
     * @param \quizaccess_sebprogram\program
     * @return string
     */
    protected function col_actions(program $data) : string {
        global $DB;
        $count = $DB->count_records("quiz_seb_program_quiz", ['idprogram' => $data->get("id")]);
        $actions = [];

        if ($data->get('courseid') != -1) {

            $actions[] = helper::format_icon_link(
                new \moodle_url(program_controller_course::get_base_url(), [
                    'id'        => $data->get('id'),
                    'action'    => program_controller_course::ACTION_EDIT,
                ]),
                't/edit',
                get_string('edit')
            );

            $actions[] = helper::format_icon_link(
                new \moodle_url(program_controller_course::get_base_url(), [
                    'id'        => $data->get('id'),
                    'action'    => program_controller_course::ACTION_DELETE,
                    'sesskey'   => sesskey(),
                ]),
                't/delete',
                get_string('delete'),
                null,
                [
                'data-action' => 'delete',
                'data-id' => $data->get('id'),
                'class' => ($count ?? 1) == 0 ? 'action-icon' : 'action-icon disabled',
                ]
            );
        }

        return implode('&nbsp;', $actions);
    }

    /**
     * Sets the data of the table.
     *
     * @param \quizaccess_sebprogram\program[] $records An array with records.
     */
    public function display(array $records) {
        foreach ($records as $record) {
            $this->add_data_keyed($this->format_row($record));
        }

        $this->finish_output();
    }

}
